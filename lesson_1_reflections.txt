How did viewing a diff between two versions of a file help you see the bug that was introduced?
I was able to see what was changed in the new file.
Once located, I focussed further on it and identified why the change prevented the game from working correctly.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
It can help me in understanding which changes were done in past and why.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros: I can manually decide what needs to be committed. It can lead to a better and effective version control. The commit size can be set to just right. In automatic control, various unnecessary versions can be created. The commit size can either be too large or too small.
Cons: The commit size needs to be judiciously decided. User can forget to commit.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Systems which deal majorly with version control of projects with multiple interrelated file allow saving multiple files in one commit. Systems like google docs deal with files like word doc or excel which are independent.

How can you use the commands git log and git diff to view the history of files?
with git log, I can see all the versions where the changes have been made. By using diff commit on every two consecutive versions, I can see what changed in each version, i.e. history.

How might using version control make you more confident to make changes that could break something?
Since I can revert back to a previous state of the system, it makes me more confident.

Now that you have your workspace set up, what do you want to try using Git for?
For working on coding projects for personal learning.

